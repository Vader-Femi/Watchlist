name: Android CI

env:
  # The name of the main module repository
  main_project_module: app

  # The name of the app
  app_name: Class Konnect

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    tags:
      - 'v*'

jobs:

#  test:
#    name: Run Unit Tests
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3.5.2
#
#      - name: Setup Java JDK
#        uses: actions/setup-java@v1.4.4
#        with:
#          java-version: 17
#          distribution: "zulu"
#          cache: gradle
#
#      - name: Generate apikey.properties
#        run: |
#          cat <<EOF > apikey.properties
#          TMDB_API_KEY:"${{secrets.TMDB_API_KEY}}"
#          EOF
#
#      - name: Decode keystore.jks
#        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/upload-keystore.jks
#
#      - name: Generate keystore.properties
#        run: |
#          cat <<EOF > keystore.properties
#          STORE_PASSWORD=${{secrets.STORE_PASSWORD}}
#          KEY_PASSWORD=${{secrets.KEY_PASSWORD}}
#          KEY_ALIAS=${{secrets.KEY_ALIAS}}
#          STORE_FILE=app/upload-keystore.jks
#          EOF
#
#      - name: Create google-services.json
#        run: |
#          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > app/google-services.json
#
#      - name: Run Tests
#        run: bash ./gradlew test --stacktrace

  build:
#    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2

      - name: Generate apikey.properties
        run: |
          cat <<EOF > apikey.properties
          TMDB_API_KEY:"${{secrets.TMDB_API_KEY }}"
          EOF

      - name: Decode keystore.jks
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/upload-keystore.jks

      - name: Generate keystore.properties
        run: |
          cat <<EOF > keystore.properties
          STORE_PASSWORD=${{secrets.STORE_PASSWORD}}
          KEY_PASSWORD=${{secrets.KEY_PASSWORD}}
          KEY_ALIAS=${{secrets.KEY_ALIAS}}
          STORE_FILE=app/upload-keystore.jks
          EOF

      - name: Create google-services.json
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > app/google-services.json

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Set Repository Name As Env Variable
      - name: Set repository name as env variable
        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.4
        with:
          java-version: 17
          distribution: "zulu"
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Caching Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      # Run Build Project
      - name: Build with Gradle
        run: ./gradlew build

      # Create APK Debug
      - name: Build apk debug project (APK) - ${{ env.main_project_module }} module
        run: ./gradlew assembleDebug

      # Create APK Release
      - name: Build apk release project (APK) - ${{ env.main_project_module }} module
        run: ./gradlew assemble

      # Create Bundle AAB Release
      # Noted for main module build [main_project_module]:bundleRelease
      - name: Build app bundle release (AAB) - ${{ env.main_project_module }} module
        run: ./gradlew ${{ env.main_project_module }}:bundleRelease

      # Noted For Output [main_project_module]/build/outputs/apk/release/
      - name: Upload APK Release - ${{ env.repository_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.date_today }} - ${{ env.app_name }}
          path: ${{ env.main_project_module }}/build/outputs/apk/release/
          retention-days: 30

      # Noted For Output [main_project_module]/build/outputs/bundle/release/
      - name: Upload AAB (App Bundle) Release - ${{ env.repository_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.date_today }} - ${{ env.app_name }}
          path: ${{ env.main_project_module }}/build/outputs/bundle/release/
          retention-days: 30

      # Upload Artifact Build
      # Noted For Output [main_project_module]/build/outputs/apk/debug/
      - name: Upload APK Debug - ${{ env.repository_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.date_today }} - ${{ env.app_name }}
          path: ${{ env.main_project_module }}/build/outputs/apk/debug/
          retention-days: 30

  generate-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Still needed if you're creating and pushing tags

      - name: Create Tag
        run: |
          TAG_NAME=$(date +'%Y.%m.%d')
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "TAG_MESSAGE=Release $TAG_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Commit and push tag
        run: |
          git config user.email "oluwafemi.za@gmail.com"
          git config user.name "Femi"
          git tag $TAG_NAME -m "$TAG_MESSAGE"
          git push origin $TAG_NAME
        env:
          TAG_NAME: ${{ env.TAG_NAME }}
          TAG_MESSAGE: ${{ env.TAG_MESSAGE }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.main_project_module }}/build/outputs/apk/release/*.apk
          tag_name: ${{ env.TAG_NAME }}
          title: Release ${{ env.app_name }} - ${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release URL
        run: echo "Release URL:${{ steps.create_release.outputs.html_url }}"
